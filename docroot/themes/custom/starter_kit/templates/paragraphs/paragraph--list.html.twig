{#
/**
 * @file
 * Template for List paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set items = [] %}
{% for key, list_item in content.field_list_rows if key|first != '#' %}
  {% set col1_title = '' %}
  {% set col1_image_render = '' %}
  {% set col1_statistic = '' %}
  {% set col2_image_render = '' %}
  {% set col3_content = '' %}

  {# Get rendered output for images and formatted text. #}
  {% if list_item['#paragraph'].bundle == 'list_item_image' %}
    {% set col1_image = list_item['#paragraph'].get('field_list_col1_image').0.entity.get('field_media_image').0 %}
    {% set col1_image_render = col1_image ? {
      '#theme': 'responsive_image',
      '#width': col1_image.width,
      '#height': col1_image.height,
      '#alt': col1_image.alt,
      '#responsive_image_style_id': 'list_column_1',
      '#uri': col1_image.entity.uri.value
    } %}
  {% endif %}

  {% if list_item['#paragraph'].bundle != 'list_item_image' %}
    {% set col2_image = list_item['#paragraph'].get('field_list_col2_image').0.entity.get('field_media_image').0 %}
    {% set col2_image_render = col2_image ? {
      '#theme': 'responsive_image',
      '#width': col2_image.width,
      '#height': col2_image.height,
      '#alt': col2_image.alt,
      '#responsive_image_style_id': 'list_column_2',
      '#uri': col2_image.entity.uri.value
    } %}
  {% endif %}

  {% if list_item['#paragraph'].bundle == 'list_item_title' %}
    {% set col1_title = list_item['#paragraph'].get('field_list_col1_title').getString() %}
  {% endif %}

  {% if list_item['#paragraph'].bundle == 'list_item_statistic' %}
    {% set col1_statistic = list_item['#paragraph'].get('field_list_col1_statistic').getString() %}
  {% endif %}

  {% set col3_content = {
    '#type': 'processed_text',
    '#text': list_item['#paragraph'].get('field_list_col3_text').0.value,
    '#format': list_item['#paragraph'].get('field_list_col3_text').0.format,
  } %}

  {# Place the values in the format expected by the 'items' array. #}
  {% set items = items|merge([{
    col1_stat: col1_statistic,
    col1_title: col1_title,
    col1_image: col1_image_render ? col1_image_render,
    col2_title: list_item['#paragraph'].get('field_list_col2_title').getString(),
    col2_image: col2_image_render ? col2_image_render,
    col3_content: col3_content,
    col3_cta_button: {
      text: list_item['#paragraph'].get('field_cta_link').0.title,
      url: list_item['#paragraph'].get('field_cta_link').0.url,
      color: tcg_color
    }
  }]) %}
{% endfor %}

{% set link = {
  text: paragraph.field_link.0.title,
  url: paragraph.field_link.0.url
} %}

{% include '@sections/list/_list.html.twig' with {
  title: content.field_heading,
  link: link,
  items: items,
  color: tcg_color,
} %}

{% set catch_cache = content|render %}
